//These are old functions and methods that I wrote. They are simply here for reference purposes.

//void max7219LED::clear(){
//    send_repeated_data((MAX7219_COLUMN1 << 8) | MAX7219_NO_OP_DATA, LEDMATRIX_AMOUNT);
//    send_repeated_data((MAX7219_COLUMN2 << 8) | MAX7219_NO_OP_DATA, LEDMATRIX_AMOUNT);
//    send_repeated_data((MAX7219_COLUMN3 << 8) | MAX7219_NO_OP_DATA, LEDMATRIX_AMOUNT);
//    send_repeated_data((MAX7219_COLUMN4 << 8) | MAX7219_NO_OP_DATA, LEDMATRIX_AMOUNT);
//    send_repeated_data((MAX7219_COLUMN5 << 8) | MAX7219_NO_OP_DATA, LEDMATRIX_AMOUNT);
//    send_repeated_data((MAX7219_COLUMN6 << 8) | MAX7219_NO_OP_DATA, LEDMATRIX_AMOUNT);
//    send_repeated_data((MAX7219_COLUMN7 << 8) | MAX7219_NO_OP_DATA, LEDMATRIX_AMOUNT);
//    send_repeated_data((MAX7219_COLUMN8 << 8) | MAX7219_NO_OP_DATA, LEDMATRIX_AMOUNT);
//}

//void max7219LED::drawPixel(const int &x, const int &y){
//    for(unsigned int columnr = 1; columnr <= 8 ;columnr++){
//        for(unsigned int screen = 1; screen <= screens; screen++){
//            cs.set(0);
//            for(unsigned int counter = 7; counter >= 0; counter--){
//                din.set(((columnr>>7)&(1<<counter))!=0);
//                pulse_clk(clk);
//                for(unsigned int data = 7; data >= 0; data--){
//                    din.set(matrix[data][columnr]);
//                    pulse_clk(clk);
//                }
//            }
//            cs.set(1);
//            clk.set(0);
//        }
//    }
//}

//void max7219LED::drawPixel(const uint8_t &x, const uint8_t &y){
//    if(x <= LEDMATRIX_SIZE){
//        if (y <= ( LEDMATRIX_SIZE * LEDMATRIX_AMOUNT ) ){
//            cs.set(0); //pull chip-select low to allow clocking in data.
//    
//            auto skip_before        = ( ( LEDMATRIX_AMOUNT - ( ( y ) / LEDMATRIX_SIZE ) ) - 1 );
//            auto skip_before_mod8   = ( LEDMATRIX_AMOUNT - ( ( y ) / LEDMATRIX_SIZE ) );
//            auto skip_after         = ( ( y / LEDMATRIX_SIZE ) );
//           auto skip_after_mod8    = ( ( y / LEDMATRIX_SIZE) -1 );
//    
//            if ( ( y % LEDMATRIX_SIZE ) != 0 ){
//                if ( ( y / LEDMATRIX_SIZE ) < LEDMATRIX_AMOUNT - 1 ){
//                    shift_repeated_data( ( ( MAX7219_REG_NO_OP      << 8 ) | MAX7219_NO_OP_DATA )                       , skip_before );
//                }
//                shift_repeated_data( ( ( x                          << 8 ) | ( 1 << ( ( y % LEDMATRIX_SIZE ) - 1 ) ) )  , 1 );
//                shift_repeated_data( ( ( MAX7219_REG_NO_OP          << 8 ) | MAX7219_NO_OP_DATA )                       , skip_after );
//            }
//    
//            if ( ( y % LEDMATRIX_SIZE ) == 0 ){
//                if ( ( y / LEDMATRIX_SIZE ) < LEDMATRIX_AMOUNT - 1 ){
//                        shift_repeated_data( ( ( MAX7219_REG_NO_OP  << 8 ) | MAX7219_NO_OP_DATA )                       , skip_before_mod8 );
//                }
//               shift_repeated_data( ( ( x                          << 8 ) | ( 1 << ( LEDMATRIX_SIZE - 1 ) ) )          , 1 );
//                shift_repeated_data( ( ( MAX7219_REG_NO_OP          << 8 ) | MAX7219_NO_OP_DATA )                       , skip_after_mod8 );
//            }
//    
//            cs.set(1); //pull chip-select high to load data.
//        }
//    }
//}

//void max7219LED::shift_addr(const uint8_t address, const uint8_t size){
//    for ( uint8_t word_cnt = 0; word_cnt < size; word_cnt++ ){
//        for ( uint8_t bit_cnt = 7; bit_cnt >= 0; bit_cnt-- ){
//            din.set( ( address & ( 1 << bit_cnt ) ) != 0 );
//            pulse_clk(clk);
//        }
//    }
//}

